---
title: "Downloading WebR"
format: html
toc: true
---

## Download from npm

The webR JavaScript loader has been published as an [npm package](https://www.npmjs.com/package/@r-wasm/webr) so that it can be bundled as part of your npm managed JavaScript or TypeScript project.

Install the package by running,

``` bash
npm i @r-wasm/webr
```

Then import the [`WebR`](api/js/classes/WebR.WebR.md) class into your project and initialise a new instance of webR.

``` javascript
import { WebR } from '@r-wasm/webr';

const webR = new WebR();
await webR.init();
```

The default location from which webR will load the WebAssembly R binaries depends on the execution environment. When running in a browser, webR will download binaries from CDN at start-up. If webR is running under Node.js, it will load binaries from the local module installation directory.

If required, this behaviour can be overridden by self-hosting the contents of a [webR release package](#download-release) (or [building from source](#build-from-source)) and providing an alternative base URL for the [`WebROptions.baseUrl`](api/js/interfaces/WebR.WebROptions.md#baseurl) configuration setting.

## Download from CDN

To dynamically import webR in JavaScript, directly from CDN, first import the [`WebR`](api/js/classes/WebR.WebR.md) class using the CDN URL. Once the promise resolves initialise a new instance of webR.

``` javascript
import('https://webr.r-wasm.org/latest/webr.mjs').then(
  async ({ WebR }) => {
    const webR = new WebR();
    await webR.init();
  }
);
```

Replace `latest` with a fixed version string, such as `v0.1.0`, if you would like to maintain a fixed version of webR.

## Download release package {#download-release}

Packages for released versions of webR can be downloaded from the [releases section](https://github.com/r-wasm/webr/releases) of the webR source repository. Release packages contain both the webR JavaScript loader and the R WebAssembly binaries.

The release package contents should be self-hosted on a web server that you control, and then the webR JavaScript loader can be imported in a similar way to above.

## Build from source {#build-from-source}

It is possible to build webR from source by following the build instructions at [the webR source repository](https://github.com/r-wasm/webr). Building from source creates a customised webR release package.
